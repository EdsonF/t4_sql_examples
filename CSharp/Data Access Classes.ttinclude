<#+

private void GenerateDataAccessClasses(IEnumerable<Database> databases, String outputDirectory)
{
  foreach (var database in databases)
  {
    var outputFilename = database.TargetLanguageIdentifier + ".DataLayer";
  
#>
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;

using <#= database.TargetLanguageIdentifier + ".Entities" #>;

using Utilities.Sql;

namespace <#= outputFilename #>
{
<#+
    foreach (var schema in database.Schemas.OrderBy(schema => schema.Name))
    {
      foreach (var table in schema.Tables.OrderBy(table => table.Name))
      {
#>
  public static class <#= table.TargetLanguageIdentifier #>_Methods
  {
    private static String _connectionString = ConfigurationManager.ConnectionStrings["<#= database.TargetLanguageIdentifier #>"].ConnectionString;

<#+
        this.GenerateSelectMethod(database, table);

        /* Views don't need insert, update and delete methods. */
        if (!table.IsView)
        {
          this.GenerateInsertMethod(database, table);
          this.GenerateUpdateMethod(database, table);
          this.GenerateMergeMethod(database, table);
          this.GenerateDeleteMethod(database, table);
        }
#>
  }
  
<#+
      } // foreach table

      if (schema.StoredProcedures.Any())
      {
#>
  public static class <#= schema.Name #>_StoredProcedureMethods
  {
    private static String _connectionString = ConfigurationManager.ConnectionStrings["<#= database.TargetLanguageIdentifier #>"].ConnectionString;

<#+
        foreach (var storedProcedure in schema.StoredProcedures.OrderBy(sp => sp.Name))
        {
          if (storedProcedure.ResultSets.Count > 1)
            this.GenerateStoredProcedureMultipleResultSetsMethod(storedProcedure);
          else if (storedProcedure.ResultSets.Count == 1)
            this.GenerateStoredProcedureSingleResultSetMethod(storedProcedure);
          else
            this.GenerateStoredProcedureNoResultSetMethod(storedProcedure);
        }
#>
  }

<#+
      } // if (schema.StoredProcedures.Any())
    } // foreach schema
#>
}

<#+

    this.SaveOutput(Path.Combine(outputDirectory, outputFilename + ".cs"));
  } // foreach database
}
#>