<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="C:\Data\Dev\Visual Studio\cs_utilities\Utilities.Core\bin\Debug\Utilities.Core.dll" #>
<#@ assembly name="C:\Data\Dev\Visual Studio\cs_utilities\Utilities.Sql\bin\Debug\Utilities.Sql.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Utilities.Core" #>
<#@ import namespace="Utilities.Sql" #>
<#@ include file="..\T4_Utilities\SQL Generator Utilities.ttinclude" #>
<#@ include file="Select.ttinclude" #>
<#@ include file="Insert.ttinclude" #>
<#@ include file="Update.ttinclude" #>
<#@ include file="Delete.ttinclude" #>
<#@ include file="Merge (Insert and Update).ttinclude" #>
<#

using (var connection = new SqlConnection("Data Source=laptop2;Initial Catalog=AdventureWorks2012;Integrated Security=true;"))
{
  connection.Open();

  var configuration =
    new Utilities.Sql.Configuration() 
    {
      Connection = connection,
      XmlSystem = XmlSystem.Linq_XDocument,
      TargetLanguage = TargetLanguage.CSharp_4_0,
      IsTargetLanguageCaseSensitive = IsTargetLanguageCaseSensitive.Yes,
      XmlValidationLocation = XmlValidationLocation.PropertySetter
    };
    
  var templateDirectory = Path.GetDirectoryName(this.Host.ResolvePath("."));
  var outputDirectory = Path.Combine(templateDirectory, "Stored Procedures");
  var server = new Server(configuration);
  var databaseNames = new List<String>() { "AdventureWorks2012" };
  var databases =
    server
    .Databases
    .Where(db => databaseNames.Contains(db.Name, CaseInsensitiveStringComparer.Instance)) 
    .OrderBy(db => db.Name);

  this.GenerateSelectStoredProcedures(databases, outputDirectory);
  this.GenerateInsertStoredProcedures(databases, outputDirectory); 
  this.GenerateUpdateStoredProcedures(databases, outputDirectory);
  this.GenerateDeleteStoredProcedures(databases, outputDirectory);
  this.GenerateMergeInsertAndUpdateStoredProcedures(databases, outputDirectory);
}

#>