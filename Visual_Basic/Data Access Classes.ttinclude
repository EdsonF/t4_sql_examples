<#+

private void GenerateDataAccessClasses(IEnumerable<Database> databases, String outputDirectory)
{
  foreach (var database in databases)
  {
    var outputFilename = IdentifierHelper.GetTargetLanguageIdentifier(database.Name) + ".DataLayer";
  
#>
Imports System
Imports System.Collections.Generic
Imports System.Configuration
Imports System.Data
Imports System.Data.SqlClient

Imports <#= IdentifierHelper.GetTargetLanguageIdentifier(database.Name) + ".Entities" #>

Imports Utilities.Sql

Namespace <#= outputFilename #>
<#+

    foreach (var schema in database.Schemas.OrderBy(schema => schema.Name))
    {
      foreach (var table in schema.Tables.OrderBy(table => table.Name))
      {
      
#>
  Public Class <#= table.TargetLanguageTableIdentifier #>Methods
    Private Shared _connectionString = ConfigurationManager.ConnectionStrings("<#= IdentifierHelper.GetTargetLanguageIdentifier(database.Name) #>").ConnectionString

<#+
        var arguments = table.Columns.GetTargetLanguageMethodIdentifiersAndTypes(ColumnType.PrimaryKey, IncludeKeyIdentificationComment.No);
        if (arguments.Count == 0)
        {
#>
    Public Shared Function Select<#= table.TargetLanguageTableIdentifier #>() As List(Of <#= table.TargetLanguageTableIdentifier #>)
<#+
        }
        else
        {
#>
    Public Shared Function Select<#= table.TargetLanguageTableIdentifier #> _
      (
        <#= String.Join("," + Environment.NewLine + "        ", arguments) #>
      ) As List(Of <#= table.TargetLanguageTableIdentifier #>)
<#+
        }
#>
      Dim result As New List(Of <#= table.TargetLanguageTableIdentifier #>)()
      
      Using connection As New SqlConnection(_connectionString)
        connection.Open()

        Using command As New SqlCommand() With { .Connection = connection, .CommandType = CommandType.StoredProcedure, .CommandText = "<#= GetStoredProcedureName(database.Name, table.Schema.Name, table.Name, "Select") #>" }
          command.Parameters.Clear()
<#+
        var parameters = table.Columns.GetTargetLanguageSqlParameterText(ColumnType.PrimaryKey, IncludeKeyIdentificationComment.No);
        if (parameters.Count > 0)
        {
#>
          command.Parameters.Add(<#= String.Join(")" + Environment.NewLine + "          command.Parameters.Add(", parameters) #>)
<#+
        }
#>

          Using reader = command.ExecuteReader(CommandBehavior.CloseConnection)
            While reader.Read()
              result.Add(
                New <#= table.TargetLanguageTableIdentifier #>() With
                {
                  <#= String.Join("," + Environment.NewLine + "                  ",
                        table.Columns.OrderBy(column => column.Name)
                        .Select(column => String.Format(".{0} = {1}", column.TargetLanguageIdentifier, column.GetTargetLanguageDataReaderExpression("reader")))) #>
                })
            End While
          End Using

          Return result
        End Using
      End Using
    End Function

<#+

        /* Views don't need insert, update and delete methods. */
        if (!table.IsView)
        {
      
#>
    Public Shared Sub Insert<#= table.TargetLanguageTableIdentifier #> _
      (
        <#= String.Join("," + Environment.NewLine + "        ", table.Columns.GetTargetLanguageMethodIdentifiersAndTypes(ColumnType.CanAppearInInsertStatement, IncludeKeyIdentificationComment.No)) #>
      )
      Using connection As New SqlConnection(_connectionString)
        connection.Open()

        Using command As New SqlCommand() With { .Connection = connection, .CommandType = CommandType.StoredProcedure, .CommandText = "<#= GetStoredProcedureName(database.Name, table.Schema.Name, table.Name, "Insert") #>" }
          command.Parameters.Clear()
          command.Parameters.Add(<#= String.Join(")" + Environment.NewLine + "          command.Parameters.Add(", table.Columns.GetTargetLanguageSqlParameterText(ColumnType.CanAppearInInsertStatement, IncludeKeyIdentificationComment.No)) #>)
          command.ExecuteNonQuery()
        End Using
      End Using
    End Sub

    Public Shared Sub Update<#= table.TargetLanguageTableIdentifier #> _
      (
        <#= String.Join("," + Environment.NewLine + "        ", table.Columns.GetTargetLanguageMethodIdentifiersAndTypes(ColumnType.PrimaryKey | ColumnType.CanAppearInUpdateSetClause, IncludeKeyIdentificationComment.No)) #>
      )
      Using connection As New SqlConnection(_connectionString)
        connection.Open()

        Using command As New SqlCommand() With { .Connection = connection, .CommandType = CommandType.StoredProcedure, .CommandText = "<#= GetStoredProcedureName(database.Name, table.Schema.Name, table.Name, "Update") #>" }
          command.Parameters.Clear()
          command.Parameters.Add(<#= String.Join(")" + Environment.NewLine + "          command.Parameters.Add(", table.Columns.GetTargetLanguageSqlParameterText(ColumnType.PrimaryKey | ColumnType.CanAppearInUpdateSetClause, IncludeKeyIdentificationComment.No)) #>)
          command.ExecuteNonQuery()
        End Using
      End Using
    End Sub

    Public Shared Sub Merge<#= table.TargetLanguageTableIdentifier #> _
      (
        <#= String.Join("," + Environment.NewLine + "        ", table.Columns.GetTargetLanguageMethodIdentifiersAndTypes(ColumnType.PrimaryKey | ColumnType.CanAppearInMergeSelectList, IncludeKeyIdentificationComment.No)) #>
      )
      Using connection As New SqlConnection(_connectionString)
        connection.Open()

        Using command As New SqlCommand() With { .Connection = connection, .CommandType = CommandType.StoredProcedure, .CommandText = "<#= GetStoredProcedureName(database.Name, table.Schema.Name, table.Name, "Merge") #>" }
          command.Parameters.Clear()
          command.Parameters.Add(<#= String.Join(")" + Environment.NewLine + "          command.Parameters.Add(", table.Columns.GetTargetLanguageSqlParameterText(ColumnType.PrimaryKey | ColumnType.CanAppearInMergeSelectList, IncludeKeyIdentificationComment.No)) #>)
          command.ExecuteNonQuery()
        End Using
      End Using
    End Sub

    Public Shared Sub Delete<#= table.TargetLanguageTableIdentifier #> _
      (
        <#= String.Join("," + Environment.NewLine + "        ", table.Columns.GetTargetLanguageMethodIdentifiersAndTypes(ColumnType.PrimaryKey, IncludeKeyIdentificationComment.No)) #>
      )
      Using connection As New SqlConnection(_connectionString)
        connection.Open()

        Using command As New SqlCommand() With { .Connection = connection, .CommandType = CommandType.StoredProcedure, .CommandText = "<#= GetStoredProcedureName(database.Name, table.Schema.Name, table.Name, "Delete") #>" }
          command.Parameters.Clear()
          command.Parameters.Add(<#= String.Join(")" + Environment.NewLine + "          command.Parameters.Add(", table.Columns.GetTargetLanguageSqlParameterText(ColumnType.PrimaryKey, IncludeKeyIdentificationComment.No)) #>)
          command.ExecuteNonQuery()
        End Using
      End Using
    End Sub
  
<#+
        } // if
#> 
  End Class
  
<#+
      } // foreach table
    } // foreach schema
#> 
End Namespace

<#+

    this.SaveOutput(Path.Combine(outputDirectory, outputFilename + ".vb"));
  } // foreach database
}
#>