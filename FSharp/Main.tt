<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="C:\Data\Dev\Visual Studio\cs_utilities\Utilities.Core\bin\Debug\Utilities.Core.dll" #>
<#@ assembly name="C:\Data\Dev\Visual Studio\cs_utilities\Utilities.Sql\bin\Debug\Utilities.Sql.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Utilities.Core" #>
<#@ import namespace="Utilities.Sql" #>
<#@ include file="..\T4_Utilities\SQL Generator Utilities.ttinclude" #>
<#@ include file="Entity Classes.ttinclude" #>
<#@ include file="Data Access Classes.ttinclude" #>
<#

using (var connection = new SqlConnection("Data Source=laptop2;Initial Catalog=AdventureWorks2012;Integrated Security=true;"))
{
  connection.Open();

  var configuration =
    new Utilities.Sql.Configuration() 
    {
      Connection = connection,
      XmlSystem = XmlSystem.Linq_XDocument,
      TargetLanguage = TargetLanguage.FSharp_Latest,
      IsTargetLanguageCaseSensitive = IsTargetLanguageCaseSensitive.Yes,
      XmlValidationLocation = XmlValidationLocation.PropertySetter
    };

  /* NOTE: Because Visual Studio F# projects don't support T4 templates,
           the standalone TextTransform.exe utility has to be used to
           process this template (it's called in the project's Pre-Build step).

           The problem is that this.Host.ResolvePath() doesn't seem to work
           in TextTransform.exe.  ResolvePath() just returns its argument, without including any
           directory data.
           
           System.Environment.CurrentDirectory cannot be depended on, either.
           Sometimes it returns the project's directory, and sometimes it returns the
           project's bin/debug or bin/release directory.  I'm guessing Visual Studio is
           altering the operating system's current directory to suit its own needs.

           So it looks like there's no other choice but to hardcode the
           outputDirectory value. */

  var outputDirectory = @"C:\Data\Dev\Visual Studio\T4\t4_sql_examples\FSharp\Output";
  var server = new Server(configuration);
  var databaseNames = new List<String>() { "AdventureWorks2012" };
  var databases =
    server
    .Databases
    .Where(db => databaseNames.Contains(db.Name, CaseInsensitiveStringComparer.Instance)) 
    .OrderBy(db => db.Name);

  this.GenerateEntityClasses(databases, outputDirectory);
  this.GenerateDataAccessClasses(databases, outputDirectory);
}

#>